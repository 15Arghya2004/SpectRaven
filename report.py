# spectraven/report.py
import json
import os
from datetime import datetime
from jinja2 import Template

class ReportGenerator:
    def __init__(self):
        self.template_dir = os.path.dirname(__file__)
    
    def generate_html_report(self, data, output_file):
        """Generate HTML security report"""
        template_str = """
<!DOCTYPE html>
<html>
<head>
    <title>SpectRaven Security Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
        .summary { background: #ecf0f1; padding: 15px; margin: 20px 0; border-radius: 5px; }
        .host { margin: 20px 0; border: 1px solid #bdc3c7; border-radius: 5px; }
        .host-header { background: #34495e; color: white; padding: 10px; }
        .port { margin: 10px; padding: 10px; border-left: 3px solid #3498db; }
        .vulnerability { background: #e74c3c; color: white; padding: 5px; margin: 5px 0; border-radius: 3px; }
        .warning { background: #f39c12; color: white; padding: 5px; margin: 5px 0; border-radius: 3px; }
        .info { background: #2ecc71; color: white; padding: 5px; margin: 5px 0; border-radius: 3px; }
        .cve { background: #c0392b; color: white; padding: 8px; margin: 5px 0; border-radius: 3px; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #bdc3c7; padding: 8px; text-align: left; }
        th { background: #34495e; color: white; }
        .severity-high { color: #e74c3c; font-weight: bold; }
        .severity-medium { color: #f39c12; font-weight: bold; }
        .severity-low { color: #f1c40f; font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç SpectRaven Security Report</h1>
        <p>Generated on: {{ timestamp }}</p>
        <p>Network: {{ data.scan_info.network }}</p>
    </div>

    <div class="summary">
        <h2>üìä Scan Summary</h2>
        <table>
            <tr><th>Metric</th><th>Value</th></tr>
            <tr><td>Network Scanned</td><td>{{ data.scan_info.network }}</td></tr>
            <tr><td>Ports Scanned</td><td>{{ data.scan_info.ports_scanned|join(', ') }}</td></tr>
            <tr><td>Live Hosts</td><td>{{ data.scan_info.live_hosts }}</td></tr>
            <tr><td>Hosts with Open Ports</td><td>{{ data.scan_info.hosts_with_open_ports }}</td></tr>
            <tr><td>Total Vulnerabilities</td><td>{{ total_vulns }}</td></tr>
            <tr><td>Critical Issues</td><td>{{ critical_issues }}</td></tr>
        </table>
    </div>

    {% for host, host_data in data.hosts.items() %}
    {% if host_data.open_ports %}
    <div class="host">
        <div class="host-header">
            <h3>üñ•Ô∏è Host: {{ host }}</h3>
        </div>
        
        {% for port in host_data.open_ports %}
        <div class="port">
            <h4>Port {{ port }}</h4>
            <p><strong>Service:</strong> {{ host_data.banners.get(port|string, 'Unknown') }}</p>
            
            {% if host_data.security_checks.get(port|string) %}
            <h5>Security Issues:</h5>
            {% for check in host_data.security_checks[port|string] %}
            <div class="{% if check.severity == 'high' %}vulnerability{% elif check.severity == 'medium' %}warning{% else %}info{% endif %}">
                <strong>{{ check.name }}:</strong> {{ check.details }}
                <span class="severity-{{ check.severity }}">[{{ check.severity.upper() }}]</span>
            </div>
            {% endfor %}
            {% endif %}
            
            {% if host_data.cves.get(port|string) %}
            <h5>Known Vulnerabilities (CVEs):</h5>
            {% for cve in host_data.cves[port|string] %}
            <div class="cve">
                <strong>{{ cve.id }}:</strong> {{ cve.description }}
                {% if cve.cvss %}<span style="float: right;">CVSS: {{ cve.cvss }}</span>{% endif %}
            </div>
            {% endfor %}
            {% endif %}
        </div>
        {% endfor %}
    </div>
    {% endif %}
    {% endfor %}

    <div class="summary">
        <h2>üîê Security Recommendations</h2>
        <ul>
            <li>Update all services to their latest versions</li>
            <li>Close unnecessary ports and services</li>
            <li>Implement proper firewall rules</li>
            <li>Enable security headers for web services</li>
            <li>Use strong authentication mechanisms</li>
            <li>Regular security audits and penetration testing</li>
        </ul>
    </div>

    <footer style="margin-top: 40px; padding: 20px; background: #ecf0f1; text-align: center;">
        <p>Generated by SpectRaven v1.0.0 - Network Security Scanner</p>
    </footer>
</body>
</html>
        """
        
        # Calculate summary statistics
        total_vulns = 0
        critical_issues = 0
        
        for host_data in data['hosts'].values():
            for port_checks in host_data.get('security_checks', {}).values():
                for check in port_checks:
                    if not check.get('passed', True):
                        total_vulns += 1
                        if check.get('severity') == 'high':
                            critical_issues += 1
            
            for port_cves in host_data.get('cves', {}).values():
                total_vulns += len(port_cves)
                critical_issues += len([cve for cve in port_cves if cve.get('cvss', 0) >= 7.0])
        
        template = Template(template_str)
        html_content = template.render(
            data=data,
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            total_vulns=total_vulns,
            critical_issues=critical_issues
        )
        
        with open(output_file, 'w') as f:
            f.write(html_content)
    
    def generate_pdf_report(self, data, output_file):
        """Generate PDF report using WeasyPrint"""
        try:
            from weasyprint import HTML, CSS
            from weasyprint.text.fonts import FontConfiguration
            
            # Generate HTML first
            html_file = output_file.replace('.pdf', '.html')
            self.generate_html_report(data, html_file)
            
            # Convert to PDF
            font_config = FontConfiguration()
            html = HTML(filename=html_file)
            html.write_pdf(output_file, font_config=font_config)
            
            # Clean up temp HTML file
            os.remove(html_file)
            
        except ImportError:
            raise Exception("WeasyPrint not installed. Install with: pip install weasyprint")